{{- if and (eq .chezmoi.os "darwin") (has "ai" .tags) -}}
#!/usr/bin/env python3
"""
MCP Tool Manager - Manages Claude MCP tools for project directories
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path


class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    NC = '\033[0m'


def print_message(level, message):
    """Print colored messages to stderr"""
    icons = {'info': '‚ÑπÔ∏è', 'success': '‚úÖ', 'warning': '‚ö†Ô∏è', 'error': '‚ùå'}
    colors = {'info': Colors.BLUE, 'success': Colors.GREEN, 'warning': Colors.YELLOW, 'error': Colors.RED}
    print(f"{colors[level]}{icons[level]}  {message}{Colors.NC}", file=sys.stderr)


def validate_environment():
    """Validate we're in a project directory and have Claude CLI"""
    project_files = ['package.json', 'pyproject.toml', 'Cargo.toml', '.git', 'go.mod']
    if not any(Path(f).exists() for f in project_files):
        print_message('error', "This script must be run from within a project directory")
        print_message('info', "Look for files like package.json, pyproject.toml, Cargo.toml, .git, or go.mod")
        sys.exit(1)

    if not shutil.which('claude'):
        print_message('error', "Claude CLI not found. Please install it first.")
        sys.exit(1)

    if not sys.stdin.isatty():
        print_message('error', "This script requires interactive input.")
        sys.exit(1)

    print_message('success', f"Project directory detected: {os.getcwd()}")


def check_prerequisites(tool_name, prerequisite):
    """Check if tool prerequisites are met"""
    if prerequisite == 'npm':
        return shutil.which('npm') or shutil.which('npx')
    return shutil.which(prerequisite)


def tool_exists(tool_name):
    """Check if MCP tool already exists in config"""
    try:
        result = subprocess.run(['claude', 'mcp', 'list'], capture_output=True, text=True)
        return f"{tool_name}:" in result.stdout
    except subprocess.SubprocessError:
        return False


def install_tool(tool_config):
    """Install a specific MCP tool using its configuration"""
    name, description, _, _, install_command = tool_config

    if tool_exists(name):
        print_message('success', f"{name} is already installed")
        return True

    print_message('info', f"Installing {description}...")

    try:
        # Replace {project_dir} placeholder with actual path
        command = [cmd.replace('{project_dir}', os.getcwd()) for cmd in install_command]
        subprocess.run(command, check=True)
        print_message('success', f"{name} installed")
        return True
    except subprocess.CalledProcessError:
        print_message('error', f"Failed to install {name}")
        return False


def get_user_selection(tools):
    """Get user selection of tools to install"""
    while True:
        print(file=sys.stderr)
        print_message('info', "Available MCP Tools:")
        print(file=sys.stderr)

        for i, (name, desc, _, _, _) in enumerate(tools.values(), 1):
            print(f"  {i}) {desc}", file=sys.stderr)

        print("  a) Install all tools", file=sys.stderr)
        print("  q) Quit", file=sys.stderr)
        print(file=sys.stderr)

        selection = input("Select tools to install (comma-separated numbers, 'a' for all, 'q' to quit): ")

        if selection.lower() == 'q':
            print_message('info', "Goodbye!")
            sys.exit(0)
        elif selection.lower() == 'a':
            return list(tools.keys())
        else:
            selected = []
            tool_list = list(tools.keys())
            for sel in selection.split(','):
                try:
                    idx = int(sel.strip()) - 1
                    if 0 <= idx < len(tool_list):
                        selected.append(tool_list[idx])
                    else:
                        print_message('warning', f"Invalid selection: {sel.strip()}")
                except ValueError:
                    print_message('warning', f"Invalid input: {sel.strip()}")

            if selected:
                return selected


def main():
    """Main execution"""
    print("üîß Claude MCP Tool Manager")
    print("==========================")

    # ==================== TOOL CONFIGURATION ====================
    # To add a new tool, simply add an entry here with:
    # 'tool-name': (name, description, prerequisite, error_message, install_command)
    #
    # install_command can use {project_dir} placeholder for current directory

    tools = {
        'serena': (
            'serena',
            'Serena - Semantic code analysis and intelligent IDE assistant',
            'uvx',
            'uvx not found. Please install uv first: curl -LsSf https://astral.sh/uv/install.sh | sh',
            ['claude', 'mcp', 'add', 'serena', '--', 'uvx', '--from', 'git+https://github.com/oraios/serena', 'serena', 'start-mcp-server', '--context', 'ide-assistant', '--project', '{project_dir}']
        ),
        'basic-memory': (
            'basic-memory',
            'Basic Memory - Enhanced memory capabilities for Claude',
            'basic-memory',
            'basic-memory not found. Please install it first. See: https://docs.basicmemory.com/integrations/claude-code/',
            ['claude', 'mcp', 'add', 'basic-memory', 'basic-memory', 'mcp']
        ),
        'gemini-cli': (
            'gemini-cli',
            'Gemini CLI - Google Gemini integration tool',
            'npm',
            'npm/npx not found. Please install Node.js first.',
            ['claude', 'mcp', 'add', 'gemini-cli', '--', 'npx', '-y', 'gemini-mcp-tool']
        )
    }
    # ============================================================

    validate_environment()

    selected_tools = get_user_selection(tools)
    if not selected_tools:
        print_message('info', "No tools selected. Exiting.")
        sys.exit(0)

    print_message('info', f"Installing {len(selected_tools)} MCP tool(s)...")
    print()

    for tool_name in selected_tools:
        tool_config = tools[tool_name]
        name, description, prerequisite, error_msg, _ = tool_config
        print_message('info', f"Processing: {description}")

        if not check_prerequisites(name, prerequisite):
            print_message('error', f"Prerequisites not met for {name}. {error_msg}")
            print_message('error', f"‚úó Failed to install {name}")
        elif install_tool(tool_config):
            print_message('success', f"‚úì {name} installed successfully")
        else:
            print_message('error', f"‚úó Failed to install {name}")
        print()

    print_message('success', "MCP tool installation complete!")


if __name__ == '__main__':
    main()
{{ end -}}