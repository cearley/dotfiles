{{- if eq .chezmoi.os "darwin" -}}
{{- $hostsDataFile := joinPath .chezmoi.homeDir ".hosts-data.json" -}}
#!/bin/bash

# Chezmoi script to update /etc/hosts with entries from ~/.hosts-data.json.
# The JSON structure is expected to be:
# {
#   "hosts": [
#     {"address": "127.0.0.1", "name": "example.local"},
#     {"address": "10.0.0.1", "name": "router.local"}
#   ]
# }
# This script runs whenever the hosts data changes, after chezmoi applies other changes on macOS.

source "{{ .chezmoi.sourceDir -}}/scripts/shared-utils.sh"

if ! require_tools mktemp grep sed cp mv; then
    exit 1
fi

set -e

HOSTS_FILE="/etc/hosts"
BACKUP_FILE="/etc/hosts.chezmoi.orig"
SEPARATOR_COMMENT="# chezmoi-managed entries - do not edit manually"
HOSTS_DATA_FILE={{ $hostsDataFile | quote }}

{{- $hostsData := dict }}
{{- if stat $hostsDataFile }}
{{- $hostsData = include $hostsDataFile | fromJson }}
# HOSTS_FILE hash: {{ include $hostsDataFile | sha256sum }}
{{- else }}
# No hosts data file present
{{- end }}

print_message "info" "Updating $HOSTS_FILE..."

create_host_entries() {
    # Create a temporary file to store the parsed entries
    TEMP_ENTRIES=$(mktemp)
    
    # Use .hosts-data.json data to generate host entries
{{- if stat $hostsDataFile }}
  {{- if hasKey $hostsData "hosts" }}
    {{- range $hostsData.hosts }}
    echo "{{ .address }} {{ .name }}" >> "$TEMP_ENTRIES"
    {{- end }}
  {{- end }}
{{- end }}

    # Check if we got any entries
    if [ ! -s "$TEMP_ENTRIES" ]; then
        print_message "warning" "No host entries found in $HOSTS_DATA_FILE"
        rm -f "$TEMP_ENTRIES"
        echo ""
        return 1
    fi
    
    echo "$TEMP_ENTRIES"
}

backup_hosts() {
    if [ ! -f "$BACKUP_FILE" ]; then
        print_message "info" "Creating backup of $HOSTS_FILE to $BACKUP_FILE"
        sudo cp "$HOSTS_FILE" "$BACKUP_FILE"
    fi
}

update_hosts() {
    local temp_entries_file="$1"
    
    print_message "info" "Updating $HOSTS_FILE with entries from $HOSTS_DATA_FILE"
    
    TEMP_HOSTS=$(mktemp)
    
    # Start with the current hosts file, removing any existing chezmoi-managed entries
    sudo grep -v "# chezmoi-managed" "$HOSTS_FILE" > "$TEMP_HOSTS" || true
    
    # Add a separator comment
    echo "" >> "$TEMP_HOSTS"
    echo "$SEPARATOR_COMMENT" >> "$TEMP_HOSTS"
    
    # Add the new entries
    while IFS= read -r line; do
        echo "$line # chezmoi-managed" >> "$TEMP_HOSTS"
    done < "$temp_entries_file"
    
    # Replace the original hosts file
    sudo mv "$TEMP_HOSTS" "$HOSTS_FILE"
    
    # Clean up
    rm -f "$temp_entries_file"
}

show_changes() {
    print_message "info" "Current chezmoi-managed entries in $HOSTS_FILE:"
    sudo grep "# chezmoi-managed" "$HOSTS_FILE" | grep -v "$SEPARATOR_COMMENT" | sed 's/# chezmoi-managed//' || print_message "info" "No chezmoi-managed entries found"
}

remove_chezmoi_entries() {
    if sudo grep -q "# chezmoi-managed" "$HOSTS_FILE"; then
        backup_hosts
        TEMP_HOSTS=$(mktemp)
        sudo grep -v "# chezmoi-managed" "$HOSTS_FILE" > "$TEMP_HOSTS"
        sudo mv "$TEMP_HOSTS" "$HOSTS_FILE"
        print_message "success" "Removed all chezmoi-managed entries from $HOSTS_FILE"
    else
        print_message "info" "No chezmoi-managed entries found to remove"
    fi
}

main() {
    # Check if hosts data file exists and if we have entries to clean up
    if [ ! -f "$HOSTS_DATA_FILE" ] && sudo grep -q "# chezmoi-managed" "$HOSTS_FILE"; then
        print_message "info" "No hosts data file found at $HOSTS_DATA_FILE, removing chezmoi-managed entries"
        remove_chezmoi_entries
        exit 0
    elif [ ! -f "$HOSTS_DATA_FILE" ]; then
        print_message "skip" "No hosts data file found at $HOSTS_DATA_FILE"
        exit 0
    fi
    
    # Create host entries from template data
    if ! temp_entries_file=$(create_host_entries); then
        print_message "skip" "No host entries to process, exiting"
        exit 0
    fi
    
    # Ensure temp file exists
    if [ ! -f "$temp_entries_file" ]; then
        print_message "error" "Temporary entries file not found: $temp_entries_file"
        exit 1
    fi
    
    # Backup the current hosts file
    backup_hosts
    
    # Update the hosts file
    update_hosts "$temp_entries_file"
    
    # Show the changes
    show_changes
    
    print_message "success" "$HOSTS_FILE update completed successfully"
}

main "$@"

{{ end -}}
