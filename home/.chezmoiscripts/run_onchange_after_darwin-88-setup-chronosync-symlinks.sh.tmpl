{{- if and (eq .chezmoi.os "darwin") (stat "/Applications/ChronoSync.app") -}}
#!/bin/bash

{{ if (stat "/Applications/ChronoSync.app") -}}
# ChronoSync is installed
{{- else -}}
# ChronoSync is not installed
exit 0
{{- end }}

# Source shared utility functions
source "{{ .chezmoi.sourceDir -}}/scripts/script-utils.sh"

{{ $computerName := includeTemplate "computer-name" . -}}
{{ $documentsTasksDir := joinPath .chezmoi.homeDir "Documents/ChronoSync" $computerName "Tasks" -}}
{{ $documentsTemplatesDir := joinPath .chezmoi.homeDir "Documents/ChronoSync/Templates" -}}

# Tasks directory contents hash: {{ if stat $documentsTasksDir }}{{ output "sh" "-c" (printf "find '%s' -type f -exec basename '{}' \\; | sort | sha256sum" $documentsTasksDir) }}{{ else }}empty{{ end }}
# Templates directory contents hash: {{ if stat $documentsTemplatesDir }}{{ output "sh" "-c" (printf "find '%s' -type f -exec basename '{}' \\; | sort | sha256sum" $documentsTemplatesDir) }}{{ else }}empty{{ end }}

# Define required directories
APP_SUPPORT_TASKS="$HOME/Library/Application Support/ChronoSync/Tasks"
APP_SUPPORT_TEMPLATES="$HOME/Library/Application Support/ChronoSync/Templates"
DOCUMENTS_TASKS="$HOME/Documents/ChronoSync/{{- $computerName -}}/Tasks"
DOCUMENTS_TEMPLATES="$HOME/Documents/ChronoSync/Templates"

# Check if all required directories exist
if [ ! -d "$APP_SUPPORT_TASKS" ]; then
    print_message "skip" "Skipping ChronoSync setup: $APP_SUPPORT_TASKS not found"
    exit 0
fi

if [ ! -d "$APP_SUPPORT_TEMPLATES" ]; then
    print_message "skip" "Skipping ChronoSync setup: $APP_SUPPORT_TEMPLATES not found"
    exit 0
fi

ensure_directory "$DOCUMENTS_TASKS"
ensure_directory "$DOCUMENTS_TEMPLATES"

print_message "info" "Setting up ChronoSync symbolic links..."

# Function to create symbolic link with checks
create_symlink() {
    local source="$1"
    local target="$2"
    local filename="$3"
    
    if [ -f "$source" ]; then
        if [ -L "$target" ] && [ "$(readlink "$target")" = "$source" ]; then
            print_message "success" "Symlink already exists and is correct: $filename"
        else
            # Remove existing file/link if it exists
            [ -e "$target" ] && rm "$target"
            ln -s "$source" "$target"
            print_message "info" "Created symlink: $filename"
        fi
    else
        print_message "warning" "Source file not found: $source"
    fi
}

# Create symbolic links for all files in Tasks directory
print_message "info" "Processing ChronoSync Tasks..."
for source_file in "$DOCUMENTS_TASKS"/*; do
    # Skip if no files match the pattern
    [ -e "$source_file" ] || continue
    
    # Get just the filename
    filename=$(basename "$source_file")
    target_file="$APP_SUPPORT_TASKS/$filename"
    
    create_symlink "$source_file" "$target_file" "$filename"
done

# Create symbolic links for all files in Templates directory
print_message "info" "Processing ChronoSync Templates..."
for source_file in "$DOCUMENTS_TEMPLATES"/*; do
    # Skip if no files match the pattern
    [ -e "$source_file" ] || continue
    
    # Get just the filename
    filename=$(basename "$source_file")
    target_file="$APP_SUPPORT_TEMPLATES/$filename"
    
    create_symlink "$source_file" "$target_file" "$filename"
done

print_message "success" "ChronoSync symbolic links setup completed"
{{ end -}}