# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
#ZSH_THEME="amuse"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
## NOTE: Auto updates will cause the ~/.oh-my-zsh directory to drift out 
## of sync with chezmoi's source state. To update Oh My Zsh and its plugins,
## refresh the downloaded archives.
zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
{{- if has "dev" .tags }}
    aws
{{- end }}
    fast-syntax-highlighting
    fzf
    git
    zsh-autosuggestions
    #zsh-defer # Powerlevel10k handles defered loading itself
)

# Auto updates will cause the ~/.oh-my-zsh directory to drift out of sync with chezmoi's source state.
DISABLE_AUTO_UPDATE="true"

source "$ZSH"/oh-my-zsh.sh

# User configuration

export PATH="$PATH:{{- .chezmoi.homeDir -}}//bin"

{{ if stat (joinPath .chezmoi.homeDir ".zsh_secrets") -}}
# Source your secrets file.
source "$HOME"/.zsh_secrets
{{- end }}

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Enhanced history searching in zsh 
# Courtesy to https://www.techrepublic.com/article/enhanced-history-searching-in-zsh/
#
# To invoke the history search, you must press [Ctrl]-R which will present the search prompt. 
# Type in the text you want to search for (i.e., perl) and then press the up and down keys
#  without pressing enter.
bindkey "^[[A" history-search-backward
bindkey "^[[B" history-search-forward

{{ if has "dev" .tags -}}

# AWS cli for use with LocalStack. (See https://github.com/localstack/awscli-local#alternative.)
alias awslocal="AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=${DEFAULT_REGION:-$AWS_DEFAULT_REGION} aws --endpoint-url=http://${LOCALSTACK_HOST:-localhost}:4566"
alias dotnet64=/usr/local/share/dotnet/x64/dotnet

source "$HOME"/.cargo/env

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# Enable frum - Ruby version manager written in Rust https://github.com/TaKO8Ki/frum
eval "$(frum init)"

export LIQUIBASE_HOME=/opt/homebrew/opt/liquibase/libexec
export PATH="$LIQUIBASE_HOME:$PATH"

# Load NVM, but instead of synchronously (which can add 200-500ms to startup),
# define a lazy-loading function that only initializes NVM when first used
export NVM_DIR="$HOME/.nvm"
nvm() {
    # Remove the lazy-loading function definition
    unset -f nvm
    # Load NVM properly when first called
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    # Execute the original nvm command with all arguments
    nvm "$@"
}

export PATH=/usr/local/smlnj/bin:"$PATH"
{{- end }}

# LLM-based command suggestions for zsh
source ~/.local/share/zsh-llm-suggestions/zsh-llm-suggestions.zsh
bindkey '^o' zsh_llm_suggestions_openai # Ctrl + O to have OpenAI suggest a command given a English description
bindkey '^[^o' zsh_llm_suggestions_openai_explain # Ctrl + alt + O to have OpenAI explain a command
#bindkey '^p' zsh_llm_suggestions_github_copilot # Ctrl + P to have GitHub Copilot suggest a command given a English description
#bindkey '^[^p' zsh_llm_suggestions_github_copilot_explain # Ctrl + alt + P to have GitHub Copilot explain a command

# Enable colorls tab completion for flags
#source $(dirname $(gem which colorls))/tab_complete.sh

# colorls
#alias lc='colorls -lA --sd'

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Add zsh-functions to fpath and autoload all functions
if [[ -d "$HOME/.local/share/zsh-functions" ]]; then
  fpath=( "$HOME/.local/share/zsh-functions/autoload" "${fpath[@]}" )
  autoload -Uz "$HOME"/.local/share/zsh-functions/autoload/*
fi

{{ if has "ai" .tags -}}
# Added by LM Studio CLI (lms)
export PATH="$PATH:{{- .chezmoi.homeDir -}}/.cache/lm-studio/bin"
export PATH="$PATH:{{- .chezmoi.homeDir -}}/.lmstudio/bin"
# End of LM Studio CLI section
{{- end }}

# ------------------------------------------------------------------------------
# Astral.sh uv - Python package manager
# ------------------------------------------------------------------------------
. "$HOME/.local/bin/env"

# ------------------------------------------------------------------------------
# Shell integrations for Homebrew-installed packages
# ------------------------------------------------------------------------------

# zoxide - A smarter cd command (lightweight, safe to load immediately)
eval "$(zoxide init zsh)"

# ------------------------------------------------------------------------------
# Performance-optimized deferred initialization
# ------------------------------------------------------------------------------
# Heavy shell integrations are deferred to improve startup time by 100-300ms
# This function runs after the prompt is displayed using zsh-defer plugin
_defer_shell_integrations() {
{{- if has "dev" .tags }}
    # asdf - Manage multiple runtime versions with a single CLI tool
    #. /opt/homebrew/opt/asdf/libexec/asdf.sh

    # direnv - Load and unload environment variables depending on the current directory
    eval "$(direnv hook zsh)" 2>/dev/null
{{- end }}

    # atuin - Magical shell history (can be slow to initialize)
    eval "$(atuin init zsh)" 2>/dev/null

    # uv shell completions (Python package manager)
    eval "$(uv generate-shell-completion zsh)" 2>/dev/null
    eval "$(uvx --generate-shell-completion zsh)" 2>/dev/null
}

# Schedule deferred initialization to run after prompt display
# Requires zsh-defer plugin (added to Oh My Zsh plugins above)
if command -v zsh-defer >/dev/null 2>&1; then
    zsh-defer _defer_shell_integrations
else
    # Fallback: run immediately if zsh-defer is not available
    _defer_shell_integrations
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="{{- .chezmoi.homeDir -}}/.sdkman"
[[ -s "{{- .chezmoi.homeDir -}}/.sdkman/bin/sdkman-init.sh" ]] && source "{{- .chezmoi.homeDir -}}/.sdkman/bin/sdkman-init.sh"
